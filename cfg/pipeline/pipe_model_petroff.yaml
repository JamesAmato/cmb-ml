
make_normalization:
  assets_out:
    norm_file: 
      handler: Config
      path_template: "{root}/{dataset}/{working}{stage}/normalization.yaml"
  assets_in:
    cmb_map: {stage: make_sims}
    obs_maps: {stage: make_sims}
  splits:
    - train
  make_stage_log: True
  dir_name: Petroff_B_Extrema

preprocess:
  assets_out:
    cmb_map: 
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_map.fits"
    obs_maps: 
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/obs_{freq}_map.fits"
  assets_in:
    norm_file: {stage: make_normalization}
    cmb_map: {stage: make_sims}
    obs_maps: {stage: make_sims}
  splits: &all_splits
    - train
    - valid
    - test
  dir_name: Petroff_C_Preprocess
  make_stage_log: True

train:
  assets_out:
    model: 
      handler: PyTorchModel
      path_template: "{root}/{dataset}/{working}{stage}/model_{epoch}.pth"
  assets_in:
    norm_file: {stage: make_normalization}
    model: {stage: train}
    cmb_map: {stage: make_sims}
    obs_maps: {stage: make_sims}
  splits:
    - train
  dir_name: Petroff_D_Model
  make_stage_log: True

train_on_preprocessed:
  assets_out:
    model: 
      handler: PyTorchModel
      path_template: "{root}/{dataset}/{working}{stage}/model_{epoch}.pth"
  assets_in:
    norm_file: {stage: make_normalization}
    model: {stage: train}
    cmb_map: {stage: preprocess}
    obs_maps: {stage: preprocess}
  splits:
    - train
  dir_name: Petroff_D_Model
  make_stage_log: True

predict: &final_inference
  assets_out:
    cmb_map: 
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_map_pred_{epoch}.npy"
  assets_in:
    norm_file: {stage: make_normalization}
    model: {stage: train}
    obs_maps: {stage: make_sims}
  splits:
    - test
  epochs: ${use_epochs}
  dir_name: Petroff_E_Predict
  make_stage_log: True

final_infer: *final_inference