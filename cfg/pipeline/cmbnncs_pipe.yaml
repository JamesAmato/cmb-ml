make_normalization:
  assets_out:
    norm_file: 
      handler: Config
      path_template: "{root}/{dataset}/{working}{stage}/normalization.yaml"
  assets_in:
    cmb_map: {stage: make_sims}
    obs_maps: {stage: make_sims}
  dir_name: CMBNNCS_B_Extrema

train:
  assets_out:
    model: 
      handler: PyTorchModel
      path_template: "{root}/{dataset}/{working}{stage}/model_{epoch}.pth"
  assets_in:
    norm_file: {stage: make_normalization}
    model: {stage: train}
    cmb_map: {stage: make_sims}
    obs_maps: {stage: make_sims}
  splits:
    - train
  dir_name: CMBNNCS_D_Model
  make_stage_log: True

predict:
  assets_out:
    cmb_map: 
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_map_pred_{epoch}.npy"
  assets_in:
    model: {stage: train}
    obs_maps: {stage: make_sims}
  splits:
    - test
  epochs: ${use_epochs}
  dir_name: CMBNNCS_E_Predict
  make_stage_log: True

# postprocess:
#   assets_out:
#     cmb_map: 
#       handler: HealpyMap
#       path_template: "{root}/{dataset}/{stage}/{split}/{sim}/cmb_map_post_{epoch}.fits"
#   assets_in:
#     norm_file: {stage: make_normalization}
#     cmb_map: {stage: predict}
#   splits:
#     - test
#   epochs: *epochs
#   dir_name: CMBNNCS_F_Postprocess
#   make_stage_log: True
